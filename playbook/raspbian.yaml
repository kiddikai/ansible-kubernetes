---
- hosts: all,localhost
  gather_facts: false
  vars:
    bootPartition: 4BBD-D3E7
    rootfsPartition: 45e99191-771b-4e12-a526-0779148892cb
    wifiCountry: DE
    ssid: K8s
    psk: Kubern3tes
    ipHostnameOffset: 100
    inventoryFile: ../inventory/k8s-cluster.yaml
    sshKeys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDclqjOCd8uXNLjNkG4lHx7FdfsUpo3cc6BkNPw9HLPH6kARI8S8d7/PEDeG3UZ+vB0wFmuV3xH7TMqoGP1sTV0cqHL9ep3pR35w20j74WaySlAGwHmNNMUaJxx0wUCKSQMr56ZML5xvK1ke5srJCvpDD8fEATLtfUyAYateQfHafVEDyf7ALhLk+57fi8eZaCeluQ9/0pHx0r/dxekxgbKUZbsvhjArMnnuYF0d2gzTYR1cBZuw3Xzl577lmLrK1Zy1jy1mBPPPTNaftantsV/TahjIGG5mAODvHlPqlCfneNy/U86kIpGzASfsS+FM3eLFnNuWCHXjA1fvVs0DqNF
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDX6YWgKkmkKkHL6nh6jTPGxJlVLDm83dIjWGI46w1uEV5r91p3F5XZnvb2VbNbMAODWOoKgeUUjeiUGK8njS42tNJPUiNiS4A2HK6s7UqbIroff1qkAdv+T1WYx6CyAo+vD+kX8aEHUIKQoxCGeh7CLjN/W5pELTjKPU6UhhhnHiSIf+2ZZizzFtIdvTS1w8DeubPA7jALt3UDguU6G8p5dHGcCiL4th/UGSpZoqbPmyV0thhi42kxy5lLutCVDczD6iHWXdPR3woGzNLbW05aV30zFTRxecoE7azzsz4jSuzx3FChnJ/83Nv0A7E8Y/MdBxbwVij6uK56aNCn+sSb
  tasks:

    # Mount partitions

    - name: Mount boot partition
      mount:
        src: UUID={{ bootPartition }}
        path: /mnt/{{ bootPartition }}
        fstype: vfat
        state: mounted
      delegate_to: localhost
      run_once: yes
      tags: mount

    - name: Mount rootfs partitions
      mount:
        src: UUID={{ rootfsPartition }}
        path: /mnt/{{ rootfsPartition }}
        fstype: ext4
        state: mounted
      delegate_to: localhost
      run_once: yes
      tags: mount

    # Determine new IP and hostname

#     this could be used in the future to make the playbook idempotent
#    - set_fact:
#        newHostname: "{{ lookup('file', '/mnt/' + rootfsPartition + '/etc/hostname') }}"
#      delegate_to: localhost
#      run_once: yes

    - name: Find max IP
      set_fact:
        newIp: "{{ (groups['nodes'] | map('extract', hostvars, ['ansible_host']) | list | sort | last).split('.') | last | int +1 }}" # find highest IP address in all inventory hosts, then add 1
      ignore_errors: yes
      register: findIp

    - name: Find new IP
      set_fact:
        newIp: "{{ ipHostnameOffset+1 }}"
      when: findIp.failed

    - name: Find new hostname
      set_fact:
        newHostname: raspi{{ newIp|int - ipHostnameOffset }}
      delegate_to: localhost
      run_once: yes

    # Enable SSH server

    - name: Enable SSH server
      file:
        path: /mnt/{{ bootPartition }}/ssh
        state: touch
      delegate_to: localhost
      run_once: yes

    # Configure network

    - name: Configure wifi
      lineinfile:
        path: /mnt/{{ rootfsPartition }}/etc/wpa_supplicant/wpa_supplicant.conf
        state: present
        line: "{{ item }}"
      with_items:
        - "country={{ wifiCountry }}"
        - "network={"
        - "  ssid=\"{{ ssid }}\""
        - "  psk=\"{{ psk }}\""
        - "}"
      delegate_to: localhost
      run_once: yes

    - name: Disable rfkill
      lineinfile:
        path: /mnt/{{ rootfsPartition }}/etc/rc.local
        state: present
        line: rfkill unblock wifi
        insertbefore: exit 0
      delegate_to: localhost
      run_once: yes

    - name: Configure hostname
      lineinfile:
        path: /mnt/{{ rootfsPartition }}/etc/hostname
        state: present
        line: "{{ newHostname }}"
        regexp: .*
      delegate_to: localhost
      run_once: yes

    - name: Configure hostname
      lineinfile:
        path: /mnt/{{ rootfsPartition }}/etc/hosts
        state: present
        line: 127.0.1.1 {{ newHostname }}
        regexp: 127.0.1.1.*
      delegate_to: localhost
      run_once: yes

    - name: Configure static IP address
      lineinfile:
        path: /mnt/{{ rootfsPartition }}/etc/dhcpcd.conf
        state: present
        line: "{{ item }}"
      with_items:
        - interface wlan0
        - static ip_address={{ ipSubnet }}{{ newIp }}/24
        - static routers={{ ipSubnet }}1
        - static domain_name_servers={{ ipSubnet }}1
      delegate_to: localhost
      run_once: yes

    # Disable swap

    - name: Disable swap
      lineinfile:
        path: /mnt/{{ rootfsPartition }}/etc/dphys-swapfile
        state: present
        regexp: ^CONF_SWAPSIZE=.*
        line: CONF_SWAPSIZE=0
      delegate_to: localhost
      run_once: yes

    # Patch /boot/cmdline.txt (memory cgroup)

    - name: Check kernel command line parameters (cgroup memory)
      delegate_to: localhost
      run_once: yes
      lineinfile:
        line: egal
        regexp: .*cgroup_memory=1.*
        backrefs: yes
        dest: /mnt/{{ bootPartition }}/cmdline.txt
        state: present
      check_mode: yes
      register: findCgroup # if line is found, changed will be true => changed==false means we must add to the file

    - name: Fix kernel command line parameters (cgroup memory)
      delegate_to: localhost
      run_once: yes
      lineinfile:
        path: /mnt/{{ bootPartition }}/cmdline.txt
        regexp: '^(.+)$'
        line: '\1 cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1'
        backrefs: yes
      when: findCgroup.changed == false

    - name: Update ansible inventory
      delegate_to: localhost
      run_once: yes
      lineinfile:
        path: "{{ inventoryFile }}"
        state: present
        line: "{{ item }}"
      with_items:
        - "    {{ newHostname }}:"
        - "      ansible_host: \"{{'{{'}} ipSubnet }}{{ newIp }}\""

    # Add public ssh keys

    - name: Add public ssh keys
      lineinfile:
        path: /mnt/{{ rootfsPartition }}/home/{{ ansible_user }}/.ssh/authorized_keys
        state: present
        create: yes
        line: "{{ item }}"
      with_items: "{{ sshKeys }}"
      delegate_to: localhost
      run_once: yes

    # Unmount partitions

    - name: Unmount partitions
      mount:
        path: /mnt/{{ item }}
        state: absent
      with_items:
        - "{{ rootfsPartition }}"
        - "{{ bootPartition }}"
      delegate_to: localhost
      run_once: yes
      tags: unmount
